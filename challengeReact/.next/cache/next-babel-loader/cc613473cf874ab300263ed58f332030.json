{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Joan\\\\Desktop\\\\AlkemyChallengeDos\\\\challengeReact\\\\context\\\\posts\\\\postState.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport postContext from './postContext';\nimport postReducer from './postReducer';\nimport { GET_POSTS, GET_POST, CREATE_POST, POST_OK, POST_ERROR, HIDE_ALERT, SELECT_POST, DELETE_POST, UPDATE_POST } from '../../types';\nimport clienteAxios from '../../config/axios';\n\nvar PostState = function PostState(props) {\n  _s();\n\n  var initialState = {\n    posts: [],\n    post: [{}],\n    message: {}\n  };\n  var timeOut = 2000; // dispatch para ejecutar las acciones\n\n  var _useReducer = useReducer(postReducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1]; // get los posts\n\n\n  var getPosts = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var url, resultado, alerta;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              url = \"https://jsonplaceholder.typicode.com/posts\";\n              _context.next = 4;\n              return clienteAxios.get(url);\n\n            case 4:\n              resultado = _context.sent;\n              dispatch({\n                type: GET_POSTS,\n                payload: resultado.data\n              });\n              _context.next = 12;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              alerta = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n              };\n              dispatch({\n                type: POST_ERROR,\n                payload: alerta\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function getPosts() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // get post por id\n\n\n  var getPost = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n      var url, resultado, alerta;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              url = \"https://jsonplaceholder.typicode.com/posts/\".concat(id);\n              _context2.next = 4;\n              return clienteAxios.get(url);\n\n            case 4:\n              resultado = _context2.sent;\n              dispatch({\n                type: GET_POST,\n                payload: resultado.data\n              });\n              _context2.next = 12;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](0);\n              alerta = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n              };\n              dispatch({\n                type: POST_ERROR,\n                payload: alerta\n              });\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 8]]);\n    }));\n\n    return function getPost(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // create nueva post\n\n\n  var createPost = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(post) {\n      var url, resultado, alerta, _alerta;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              url = \"https://jsonplaceholder.typicode.com/posts\";\n              _context3.next = 4;\n              return clienteAxios.post(url, post);\n\n            case 4:\n              resultado = _context3.sent;\n              alerta = {\n                msg: 'Post agregado exitosamente',\n                categoria: 'alerta-ok'\n              };\n              dispatch({\n                type: POST_OK,\n                payload: alerta\n              }); // insertar el post en el state\n\n              dispatch({\n                type: CREATE_POST,\n                payload: resultado.data\n              });\n              _context3.next = 14;\n              break;\n\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](0);\n              _alerta = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n              };\n              dispatch({\n                type: POST_ERROR,\n                payload: _alerta\n              });\n\n            case 14:\n              // Limpia la alerta después de 3 segundos\n              setTimeout(function () {\n                dispatch({\n                  type: HIDE_ALERT\n                });\n              }, timeOut);\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 10]]);\n    }));\n\n    return function createPost(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // selecciona el post que el usuario dio click\n\n\n  var selectPost = function selectPost(postId) {\n    dispatch({\n      type: SELECT_POST,\n      payload: postId\n    });\n  }; // edita o modifica una post\n\n\n  var updatePost = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(post) {\n      var url, resultado, alerta, _alerta2;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              url = \"https://jsonplaceholder.typicode.com/posts/\".concat(post.id);\n              _context4.next = 4;\n              return clienteAxios.put(url, post);\n\n            case 4:\n              resultado = _context4.sent;\n              alerta = {\n                msg: 'Post editado exitosamente',\n                categoria: 'alerta-ok'\n              };\n              dispatch({\n                type: POST_OK,\n                payload: alerta\n              });\n              dispatch({\n                type: UPDATE_POST,\n                payload: resultado.data\n              });\n              _context4.next = 14;\n              break;\n\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](0);\n              _alerta2 = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n              };\n              dispatch({\n                type: POST_ERROR,\n                payload: _alerta2\n              });\n\n            case 14:\n              // Limpia la alerta después de 3 segundos\n              setTimeout(function () {\n                dispatch({\n                  type: HIDE_ALERT\n                });\n              }, timeOut);\n\n            case 15:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 10]]);\n    }));\n\n    return function updatePost(_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // elimina un post\n\n\n  var deletePost = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(postId) {\n      var url, alerta, _alerta3;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              url = \"https://jsonplaceholder.typicode.com/posts/:\".concat(postId);\n              _context5.next = 4;\n              return clienteAxios[\"delete\"](url);\n\n            case 4:\n              alerta = {\n                msg: 'Post eliminado exitosamente',\n                categoria: 'alerta-ok'\n              };\n              dispatch({\n                type: POST_OK,\n                payload: alerta\n              });\n              dispatch({\n                type: DELETE_POST,\n                payload: postId\n              });\n              _context5.next = 13;\n              break;\n\n            case 9:\n              _context5.prev = 9;\n              _context5.t0 = _context5[\"catch\"](0);\n              _alerta3 = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n              };\n              dispatch({\n                type: POST_ERROR,\n                payload: _alerta3\n              });\n\n            case 13:\n              // Limpia la alerta después de 3 segundos\n              setTimeout(function () {\n                dispatch({\n                  type: HIDE_ALERT\n                });\n              }, timeOut);\n\n            case 14:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[0, 9]]);\n    }));\n\n    return function deletePost(_x4) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(postContext.Provider, {\n    value: {\n      posts: state.posts,\n      post: state.post,\n      message: state.message,\n      getPosts: getPosts,\n      getPost: getPost,\n      createPost: createPost,\n      selectPost: selectPost,\n      updatePost: updatePost,\n      deletePost: deletePost\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\n_s(PostState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = PostState;\nexport default PostState;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostState\");","map":{"version":3,"sources":["C:/Users/Joan/Desktop/AlkemyChallengeDos/challengeReact/context/posts/postState.js"],"names":["React","useReducer","postContext","postReducer","GET_POSTS","GET_POST","CREATE_POST","POST_OK","POST_ERROR","HIDE_ALERT","SELECT_POST","DELETE_POST","UPDATE_POST","clienteAxios","PostState","props","initialState","posts","post","message","timeOut","state","dispatch","getPosts","url","get","resultado","type","payload","data","alerta","msg","categoria","getPost","id","createPost","setTimeout","selectPost","postId","updatePost","put","deletePost","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\r\n\r\nimport postContext from './postContext';\r\nimport postReducer from './postReducer';\r\nimport {\r\n    GET_POSTS,\r\n    GET_POST,\r\n    CREATE_POST,\r\n    POST_OK,\r\n    POST_ERROR,\r\n    HIDE_ALERT,\r\n    SELECT_POST,\r\n    DELETE_POST,\r\n    UPDATE_POST\r\n} from '../../types';\r\n\r\nimport clienteAxios from '../../config/axios';\r\n\r\nconst PostState = props => {\r\n\r\n    const initialState = {\r\n        posts : [],\r\n        post: [{}],\r\n        message: {}\r\n    }\r\n\r\n    const timeOut = 2000;\r\n\r\n    // dispatch para ejecutar las acciones\r\n    const [state, dispatch] = useReducer(postReducer, initialState);\r\n\r\n    // get los posts\r\n    const getPosts = async () => {\r\n        try {\r\n            const url = `https://jsonplaceholder.typicode.com/posts`;\r\n            const resultado = await clienteAxios.get(url);\r\n            \r\n            dispatch({\r\n                type: GET_POSTS,\r\n                payload: resultado.data\r\n            });\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n\r\n    // get post por id\r\n    const getPost = async id => {\r\n        try {\r\n            const url = `https://jsonplaceholder.typicode.com/posts/${id}`;\r\n            const resultado = await clienteAxios.get(url);\r\n            \r\n            dispatch({\r\n                type: GET_POST,\r\n                payload: resultado.data\r\n            });\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n    \r\n    // create nueva post\r\n    const createPost = async post => {\r\n\r\n        try {\r\n\r\n            const url = `https://jsonplaceholder.typicode.com/posts`;\r\n            const resultado = await clienteAxios.post(url, post);\r\n            \r\n            const alerta = {\r\n                msg: 'Post agregado exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: POST_OK,\r\n                payload: alerta\r\n            })\r\n\r\n            // insertar el post en el state\r\n            dispatch({\r\n                type: CREATE_POST,\r\n                payload: resultado.data\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: HIDE_ALERT\r\n            })\r\n        }, timeOut); \r\n    }\r\n\r\n    // selecciona el post que el usuario dio click\r\n    const selectPost = postId => {\r\n        dispatch({\r\n            type: SELECT_POST,\r\n            payload: postId\r\n        })\r\n    }\r\n\r\n    // edita o modifica una post\r\n    const updatePost = async post => {\r\n        try {\r\n            const url = `https://jsonplaceholder.typicode.com/posts/${post.id}`;\r\n            const resultado = await clienteAxios.put(url, post);\r\n\r\n            const alerta = {\r\n                msg: 'Post editado exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: POST_OK,\r\n                payload: alerta\r\n            })\r\n            \r\n            dispatch({\r\n                type: UPDATE_POST,\r\n                payload: resultado.data\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: HIDE_ALERT\r\n            })\r\n        }, timeOut); \r\n    }\r\n\r\n    // elimina un post\r\n    const deletePost = async postId => {\r\n        try {\r\n            const url = `https://jsonplaceholder.typicode.com/posts/:${postId}`;\r\n\r\n            await clienteAxios.delete(url);\r\n            \r\n            const alerta = {\r\n                msg: 'Post eliminado exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: POST_OK,\r\n                payload: alerta\r\n            })\r\n\r\n            dispatch({\r\n                type: DELETE_POST,\r\n                payload: postId\r\n            })\r\n                        \r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: HIDE_ALERT\r\n            })\r\n        }, timeOut); \r\n    }\r\n\r\n    return (\r\n        <postContext.Provider\r\n            value={{\r\n                posts: state.posts,\r\n                post: state.post,\r\n                message: state.message,\r\n                getPosts,\r\n                getPost,\r\n                createPost,\r\n                selectPost,\r\n                updatePost,\r\n                deletePost\r\n            }}\r\n        >\r\n            {props.children}\r\n        </postContext.Provider>\r\n    )\r\n}\r\n\r\nexport default PostState;"]},"metadata":{},"sourceType":"module"}