{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joan\\\\Desktop\\\\AlkemyChallengeDos\\\\challengeReact\\\\context\\\\posts\\\\postState.js\";\nvar __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport postContext from './postContext';\nimport postReducer from './postReducer';\nimport { OBTENER_POSTS, AGREGAR_POST, POST_EXITOSO, POST_ERROR, OCULTAR_ALERTA, POST_ACTUAL, ELIMINAR_POST, ACTUALIZAR_POST } from '../../types';\nimport clienteAxios from '../../config/axios';\n\nconst PostState = props => {\n  const initialState = {\n    posts: [],\n    post: [{}],\n    mensaje: {}\n  };\n  const timeOut = 2000; // dispatch para ejecutar las acciones\n\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(postReducer, initialState); // obtener los posts\n\n  const obtenerPosts = async () => {\n    try {\n      const resultado = await clienteAxios.get('https://jsonplaceholder.typicode.com/posts');\n      dispatch({\n        type: OBTENER_POSTS,\n        payload: resultado.data.posts\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: POST_ERROR,\n        payload: alerta\n      });\n    }\n  }; // agregar nueva post\n\n\n  const agregarPost = async post => {\n    try {\n      const resultado = await clienteAxios.post('/api/posts', post);\n      const alerta = {\n        msg: 'Post agregado exitosamente',\n        categoria: 'alerta-ok'\n      };\n      dispatch({\n        type: POST_EXITOSO,\n        payload: alerta\n      }); // insertar el post en el state\n\n      dispatch({\n        type: AGREGAR_POST,\n        payload: resultado.data\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: POST_ERROR,\n        payload: alerta\n      });\n    } // Limpia la alerta después de 3 segundos\n\n\n    setTimeout(() => {\n      dispatch({\n        type: OCULTAR_ALERTA\n      });\n    }, timeOut);\n  }; // selecciona el post que el usuario dio click\n\n\n  const postActual = postId => {\n    dispatch({\n      type: POST_ACTUAL,\n      payload: postId\n    });\n  }; // edita o modifica una post\n\n\n  const actualizarPost = async post => {\n    try {\n      const resultado = await clienteAxios.put(`/api/posts/${post._id}`, post);\n      const alerta = {\n        msg: 'Post editado exitosamente',\n        categoria: 'alerta-ok'\n      };\n      dispatch({\n        type: POST_EXITOSO,\n        payload: alerta\n      });\n      dispatch({\n        type: ACTUALIZAR_POST,\n        payload: resultado.data.post\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: POST_ERROR,\n        payload: alerta\n      });\n    } // Limpia la alerta después de 3 segundos\n\n\n    setTimeout(() => {\n      dispatch({\n        type: OCULTAR_ALERTA\n      });\n    }, timeOut);\n  }; // elimina un post\n\n\n  const eliminarPost = async postId => {\n    try {\n      await clienteAxios.delete(`/api/posts/${postId}`);\n      const alerta = {\n        msg: 'Post eliminado exitosamente',\n        categoria: 'alerta-ok'\n      };\n      dispatch({\n        type: POST_EXITOSO,\n        payload: alerta\n      });\n      dispatch({\n        type: ELIMINAR_POST,\n        payload: postId\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: POST_ERROR,\n        payload: alerta\n      });\n    } // Limpia la alerta después de 3 segundos\n\n\n    setTimeout(() => {\n      dispatch({\n        type: OCULTAR_ALERTA\n      });\n    }, timeOut);\n  };\n\n  return __jsx(postContext.Provider, {\n    value: {\n      posts: state.posts,\n      post: state.post,\n      mensaje: state.mensaje,\n      obtenerPosts,\n      agregarPost,\n      postActual,\n      actualizarPost,\n      eliminarPost\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default PostState;","map":{"version":3,"sources":["C:/Users/Joan/Desktop/AlkemyChallengeDos/challengeReact/context/posts/postState.js"],"names":["React","useReducer","postContext","postReducer","OBTENER_POSTS","AGREGAR_POST","POST_EXITOSO","POST_ERROR","OCULTAR_ALERTA","POST_ACTUAL","ELIMINAR_POST","ACTUALIZAR_POST","clienteAxios","PostState","props","initialState","posts","post","mensaje","timeOut","state","dispatch","obtenerPosts","resultado","get","type","payload","data","error","alerta","msg","categoria","agregarPost","setTimeout","postActual","postId","actualizarPost","put","_id","eliminarPost","delete","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\r\n\r\nimport postContext from './postContext';\r\nimport postReducer from './postReducer';\r\nimport {\r\n    OBTENER_POSTS,\r\n    AGREGAR_POST,\r\n    POST_EXITOSO,\r\n    POST_ERROR,\r\n    OCULTAR_ALERTA,\r\n    POST_ACTUAL,\r\n    ELIMINAR_POST,\r\n    ACTUALIZAR_POST\r\n} from '../../types';\r\n\r\nimport clienteAxios from '../../config/axios';\r\n\r\nconst PostState = props => {\r\n\r\n    const initialState = {\r\n        posts : [],\r\n        post: [{}],\r\n        mensaje: {}\r\n    }\r\n\r\n    const timeOut = 2000;\r\n\r\n    // dispatch para ejecutar las acciones\r\n    const [state, dispatch] = useReducer(postReducer, initialState);\r\n\r\n    // obtener los posts\r\n    const obtenerPosts = async () => {\r\n        try {\r\n            const resultado = await clienteAxios.get('https://jsonplaceholder.typicode.com/posts');\r\n            \r\n            dispatch({\r\n                type: OBTENER_POSTS,\r\n                payload: resultado.data.posts\r\n            });\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n    \r\n    // agregar nueva post\r\n    const agregarPost = async post => {\r\n\r\n        try {\r\n            const resultado = await clienteAxios.post('/api/posts', post);\r\n            \r\n            const alerta = {\r\n                msg: 'Post agregado exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: POST_EXITOSO,\r\n                payload: alerta\r\n            })\r\n\r\n            // insertar el post en el state\r\n            dispatch({\r\n                type: AGREGAR_POST,\r\n                payload: resultado.data\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: OCULTAR_ALERTA\r\n            })\r\n        }, timeOut); \r\n    }\r\n\r\n    // selecciona el post que el usuario dio click\r\n    const postActual = postId => {\r\n        dispatch({\r\n            type: POST_ACTUAL,\r\n            payload: postId\r\n        })\r\n    }\r\n\r\n    // edita o modifica una post\r\n    const actualizarPost = async post => {\r\n        try {\r\n            const resultado = await clienteAxios.put(`/api/posts/${post._id}`, post);\r\n            \r\n            const alerta = {\r\n                msg: 'Post editado exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: POST_EXITOSO,\r\n                payload: alerta\r\n            })\r\n            \r\n            dispatch({\r\n                type: ACTUALIZAR_POST,\r\n                payload: resultado.data.post\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: OCULTAR_ALERTA\r\n            })\r\n        }, timeOut); \r\n    }\r\n\r\n    // elimina un post\r\n    const eliminarPost = async postId => {\r\n        try {\r\n            \r\n            await clienteAxios.delete(`/api/posts/${postId}`);\r\n            \r\n            const alerta = {\r\n                msg: 'Post eliminado exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: POST_EXITOSO,\r\n                payload: alerta\r\n            })\r\n\r\n            dispatch({\r\n                type: ELIMINAR_POST,\r\n                payload: postId\r\n            })\r\n                        \r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: OCULTAR_ALERTA\r\n            })\r\n        }, timeOut); \r\n    }\r\n\r\n    return (\r\n        <postContext.Provider\r\n            value={{\r\n                posts: state.posts,\r\n                post: state.post,\r\n                mensaje: state.mensaje,\r\n                obtenerPosts,\r\n                agregarPost,\r\n                postActual,\r\n                actualizarPost,\r\n                eliminarPost\r\n            }}\r\n        >\r\n            {props.children}\r\n        </postContext.Provider>\r\n    )\r\n}\r\n\r\nexport default PostState;"]},"metadata":{},"sourceType":"module"}