{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joan\\\\Desktop\\\\AlkemyChallengeDos\\\\challengeReact\\\\context\\\\posts\\\\postState.js\";\nvar __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport postContext from './postContext';\nimport postReducer from './postReducer';\nimport { GET_POSTS, GET_POST, CREATE_POST, POST_OK, POST_ERROR, HIDE_ALERT, SELECT_POST, DELETE_POST, UPDATE_POST } from '../../types';\nimport clienteAxios from '../../config/axios';\n\nconst PostState = props => {\n  const initialState = {\n    posts: [],\n    post: [{}],\n    message: {}\n  };\n  const timeOut = 2000; // dispatch para ejecutar las acciones\n\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(postReducer, initialState); // get los posts\n\n  const getPosts = async () => {\n    try {\n      const url = `https://jsonplaceholder.typicode.com/posts`;\n      const resultado = await clienteAxios.get(url);\n      dispatch({\n        type: GET_POSTS,\n        payload: resultado.data\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: POST_ERROR,\n        payload: alerta\n      });\n    }\n  }; // get post por id\n\n\n  const getPost = async id => {\n    try {\n      const url = `https://jsonplaceholder.typicode.com/posts/${id}`;\n      const resultado = await clienteAxios.get(url);\n      dispatch({\n        type: GET_POST,\n        payload: resultado.data\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: POST_ERROR,\n        payload: alerta\n      });\n    }\n  }; // create nueva post\n\n\n  const createPost = async post => {\n    try {\n      const url = `https://jsonplaceholder.typicode.com/posts`;\n      const resultado = await clienteAxios.post(url, post);\n      const alerta = {\n        msg: 'Post agregado exitosamente',\n        categoria: 'alerta-ok'\n      };\n      dispatch({\n        type: POST_OK,\n        payload: alerta\n      }); // insertar el post en el state\n\n      dispatch({\n        type: CREATE_POST,\n        payload: resultado.data\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: POST_ERROR,\n        payload: alerta\n      });\n    } // Limpia la alerta después de 3 segundos\n\n\n    setTimeout(() => {\n      dispatch({\n        type: HIDE_ALERT\n      });\n    }, timeOut);\n  }; // selecciona el post que el usuario dio click\n\n\n  const selectPost = postId => {\n    dispatch({\n      type: SELECT_POST,\n      payload: postId\n    });\n  }; // edita o modifica una post\n\n\n  const updatePost = async post => {\n    try {\n      const url = `https://jsonplaceholder.typicode.com/posts/${post.id}`;\n      const resultado = await clienteAxios.put(url, post);\n      const alerta = {\n        msg: 'Post editado exitosamente',\n        categoria: 'alerta-ok'\n      };\n      dispatch({\n        type: POST_OK,\n        payload: alerta\n      });\n      dispatch({\n        type: UPDATE_POST,\n        payload: resultado.data\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: POST_ERROR,\n        payload: alerta\n      });\n    } // Limpia la alerta después de 3 segundos\n\n\n    setTimeout(() => {\n      dispatch({\n        type: HIDE_ALERT\n      });\n    }, timeOut);\n  }; // elimina un post\n\n\n  const deletePost = async postId => {\n    try {\n      const url = `https://jsonplaceholder.typicode.com/posts/:${postId}`;\n      await clienteAxios.delete(url);\n      const alerta = {\n        msg: 'Post eliminado exitosamente',\n        categoria: 'alerta-ok'\n      };\n      dispatch({\n        type: POST_OK,\n        payload: alerta\n      });\n      dispatch({\n        type: DELETE_POST,\n        payload: postId\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: POST_ERROR,\n        payload: alerta\n      });\n    } // Limpia la alerta después de 3 segundos\n\n\n    setTimeout(() => {\n      dispatch({\n        type: HIDE_ALERT\n      });\n    }, timeOut);\n  };\n\n  return __jsx(postContext.Provider, {\n    value: {\n      posts: state.posts,\n      post: state.post,\n      message: state.message,\n      getPosts,\n      getPost,\n      createPost,\n      selectPost,\n      updatePost,\n      deletePost\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default PostState;","map":{"version":3,"sources":["C:/Users/Joan/Desktop/AlkemyChallengeDos/challengeReact/context/posts/postState.js"],"names":["React","useReducer","postContext","postReducer","GET_POSTS","GET_POST","CREATE_POST","POST_OK","POST_ERROR","HIDE_ALERT","SELECT_POST","DELETE_POST","UPDATE_POST","clienteAxios","PostState","props","initialState","posts","post","message","timeOut","state","dispatch","getPosts","url","resultado","get","type","payload","data","error","alerta","msg","categoria","getPost","id","createPost","setTimeout","selectPost","postId","updatePost","put","deletePost","delete","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SACIC,SADJ,EAEIC,QAFJ,EAGIC,WAHJ,EAIIC,OAJJ,EAKIC,UALJ,EAMIC,UANJ,EAOIC,WAPJ,EAQIC,WARJ,EASIC,WATJ,QAUO,aAVP;AAYA,OAAOC,YAAP,MAAyB,oBAAzB;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AAEvB,QAAMC,YAAY,GAAG;AACjBC,IAAAA,KAAK,EAAG,EADS;AAEjBC,IAAAA,IAAI,EAAE,CAAC,EAAD,CAFW;AAGjBC,IAAAA,OAAO,EAAE;AAHQ,GAArB;AAMA,QAAMC,OAAO,GAAG,IAAhB,CARuB,CAUvB;;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBrB,UAAU,CAACE,WAAD,EAAca,YAAd,CAApC,CAXuB,CAavB;;AACA,QAAMO,QAAQ,GAAG,YAAY;AACzB,QAAI;AACA,YAAMC,GAAG,GAAI,4CAAb;AACA,YAAMC,SAAS,GAAG,MAAMZ,YAAY,CAACa,GAAb,CAAiBF,GAAjB,CAAxB;AAEAF,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEvB,SADD;AAELwB,QAAAA,OAAO,EAAEH,SAAS,CAACI;AAFd,OAAD,CAAR;AAIH,KARD,CAQE,OAAOC,KAAP,EAAc;AACZ,YAAMC,MAAM,GAAG;AACXC,QAAAA,GAAG,EAAE,eADM;AAEXC,QAAAA,SAAS,EAAE;AAFA,OAAf;AAIAX,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEnB,UADD;AAELoB,QAAAA,OAAO,EAAEG;AAFJ,OAAD,CAAR;AAIH;AACJ,GAnBD,CAduB,CAmCvB;;;AACA,QAAMG,OAAO,GAAG,MAAMC,EAAN,IAAY;AACxB,QAAI;AACA,YAAMX,GAAG,GAAI,8CAA6CW,EAAG,EAA7D;AACA,YAAMV,SAAS,GAAG,MAAMZ,YAAY,CAACa,GAAb,CAAiBF,GAAjB,CAAxB;AAEAF,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEtB,QADD;AAELuB,QAAAA,OAAO,EAAEH,SAAS,CAACI;AAFd,OAAD,CAAR;AAIH,KARD,CAQE,OAAOC,KAAP,EAAc;AACZ,YAAMC,MAAM,GAAG;AACXC,QAAAA,GAAG,EAAE,eADM;AAEXC,QAAAA,SAAS,EAAE;AAFA,OAAf;AAIAX,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEnB,UADD;AAELoB,QAAAA,OAAO,EAAEG;AAFJ,OAAD,CAAR;AAIH;AACJ,GAnBD,CApCuB,CAyDvB;;;AACA,QAAMK,UAAU,GAAG,MAAMlB,IAAN,IAAc;AAE7B,QAAI;AAEA,YAAMM,GAAG,GAAI,4CAAb;AACA,YAAMC,SAAS,GAAG,MAAMZ,YAAY,CAACK,IAAb,CAAkBM,GAAlB,EAAuBN,IAAvB,CAAxB;AAEA,YAAMa,MAAM,GAAG;AACXC,QAAAA,GAAG,EAAE,4BADM;AAEXC,QAAAA,SAAS,EAAE;AAFA,OAAf;AAKAX,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEpB,OADD;AAELqB,QAAAA,OAAO,EAAEG;AAFJ,OAAD,CAAR,CAVA,CAeA;;AACAT,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAErB,WADD;AAELsB,QAAAA,OAAO,EAAEH,SAAS,CAACI;AAFd,OAAD,CAAR;AAIH,KApBD,CAoBE,OAAOC,KAAP,EAAc;AACZ,YAAMC,MAAM,GAAG;AACXC,QAAAA,GAAG,EAAE,eADM;AAEXC,QAAAA,SAAS,EAAE;AAFA,OAAf;AAIAX,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEnB,UADD;AAELoB,QAAAA,OAAO,EAAEG;AAFJ,OAAD,CAAR;AAIH,KA/B4B,CAiC7B;;;AACAM,IAAAA,UAAU,CAAC,MAAM;AACbf,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAElB;AADD,OAAD,CAAR;AAGH,KAJS,EAIPW,OAJO,CAAV;AAKH,GAvCD,CA1DuB,CAmGvB;;;AACA,QAAMkB,UAAU,GAAGC,MAAM,IAAI;AACzBjB,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEjB,WADD;AAELkB,MAAAA,OAAO,EAAEW;AAFJ,KAAD,CAAR;AAIH,GALD,CApGuB,CA2GvB;;;AACA,QAAMC,UAAU,GAAG,MAAMtB,IAAN,IAAc;AAC7B,QAAI;AACA,YAAMM,GAAG,GAAI,8CAA6CN,IAAI,CAACiB,EAAG,EAAlE;AACA,YAAMV,SAAS,GAAG,MAAMZ,YAAY,CAAC4B,GAAb,CAAiBjB,GAAjB,EAAsBN,IAAtB,CAAxB;AAEA,YAAMa,MAAM,GAAG;AACXC,QAAAA,GAAG,EAAE,2BADM;AAEXC,QAAAA,SAAS,EAAE;AAFA,OAAf;AAKAX,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEpB,OADD;AAELqB,QAAAA,OAAO,EAAEG;AAFJ,OAAD,CAAR;AAKAT,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEf,WADD;AAELgB,QAAAA,OAAO,EAAEH,SAAS,CAACI;AAFd,OAAD,CAAR;AAIH,KAlBD,CAkBE,OAAOC,KAAP,EAAc;AACZ,YAAMC,MAAM,GAAG;AACXC,QAAAA,GAAG,EAAE,eADM;AAEXC,QAAAA,SAAS,EAAE;AAFA,OAAf;AAIAX,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEnB,UADD;AAELoB,QAAAA,OAAO,EAAEG;AAFJ,OAAD,CAAR;AAIH,KA5B4B,CA8B7B;;;AACAM,IAAAA,UAAU,CAAC,MAAM;AACbf,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAElB;AADD,OAAD,CAAR;AAGH,KAJS,EAIPW,OAJO,CAAV;AAKH,GApCD,CA5GuB,CAkJvB;;;AACA,QAAMsB,UAAU,GAAG,MAAMH,MAAN,IAAgB;AAC/B,QAAI;AACA,YAAMf,GAAG,GAAI,+CAA8Ce,MAAO,EAAlE;AAEA,YAAM1B,YAAY,CAAC8B,MAAb,CAAoBnB,GAApB,CAAN;AAEA,YAAMO,MAAM,GAAG;AACXC,QAAAA,GAAG,EAAE,6BADM;AAEXC,QAAAA,SAAS,EAAE;AAFA,OAAf;AAKAX,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEpB,OADD;AAELqB,QAAAA,OAAO,EAAEG;AAFJ,OAAD,CAAR;AAKAT,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEhB,WADD;AAELiB,QAAAA,OAAO,EAAEW;AAFJ,OAAD,CAAR;AAKH,KApBD,CAoBE,OAAOT,KAAP,EAAc;AACZ,YAAMC,MAAM,GAAG;AACXC,QAAAA,GAAG,EAAE,eADM;AAEXC,QAAAA,SAAS,EAAE;AAFA,OAAf;AAIAX,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEnB,UADD;AAELoB,QAAAA,OAAO,EAAEG;AAFJ,OAAD,CAAR;AAIH,KA9B8B,CAgC/B;;;AACAM,IAAAA,UAAU,CAAC,MAAM;AACbf,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAElB;AADD,OAAD,CAAR;AAGH,KAJS,EAIPW,OAJO,CAAV;AAKH,GAtCD;;AAwCA,SACI,MAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AACHH,MAAAA,KAAK,EAAEI,KAAK,CAACJ,KADV;AAEHC,MAAAA,IAAI,EAAEG,KAAK,CAACH,IAFT;AAGHC,MAAAA,OAAO,EAAEE,KAAK,CAACF,OAHZ;AAIHI,MAAAA,QAJG;AAKHW,MAAAA,OALG;AAMHE,MAAAA,UANG;AAOHE,MAAAA,UAPG;AAQHE,MAAAA,UARG;AASHE,MAAAA;AATG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaK3B,KAAK,CAAC6B,QAbX,CADJ;AAiBH,CA5MD;;AA8MA,eAAe9B,SAAf","sourcesContent":["import React, { useReducer } from 'react';\r\n\r\nimport postContext from './postContext';\r\nimport postReducer from './postReducer';\r\nimport {\r\n    GET_POSTS,\r\n    GET_POST,\r\n    CREATE_POST,\r\n    POST_OK,\r\n    POST_ERROR,\r\n    HIDE_ALERT,\r\n    SELECT_POST,\r\n    DELETE_POST,\r\n    UPDATE_POST\r\n} from '../../types';\r\n\r\nimport clienteAxios from '../../config/axios';\r\n\r\nconst PostState = props => {\r\n\r\n    const initialState = {\r\n        posts : [],\r\n        post: [{}],\r\n        message: {}\r\n    }\r\n\r\n    const timeOut = 2000;\r\n\r\n    // dispatch para ejecutar las acciones\r\n    const [state, dispatch] = useReducer(postReducer, initialState);\r\n\r\n    // get los posts\r\n    const getPosts = async () => {\r\n        try {\r\n            const url = `https://jsonplaceholder.typicode.com/posts`;\r\n            const resultado = await clienteAxios.get(url);\r\n            \r\n            dispatch({\r\n                type: GET_POSTS,\r\n                payload: resultado.data\r\n            });\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n\r\n    // get post por id\r\n    const getPost = async id => {\r\n        try {\r\n            const url = `https://jsonplaceholder.typicode.com/posts/${id}`;\r\n            const resultado = await clienteAxios.get(url);\r\n            \r\n            dispatch({\r\n                type: GET_POST,\r\n                payload: resultado.data\r\n            });\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n    \r\n    // create nueva post\r\n    const createPost = async post => {\r\n\r\n        try {\r\n\r\n            const url = `https://jsonplaceholder.typicode.com/posts`;\r\n            const resultado = await clienteAxios.post(url, post);\r\n            \r\n            const alerta = {\r\n                msg: 'Post agregado exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: POST_OK,\r\n                payload: alerta\r\n            })\r\n\r\n            // insertar el post en el state\r\n            dispatch({\r\n                type: CREATE_POST,\r\n                payload: resultado.data\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: HIDE_ALERT\r\n            })\r\n        }, timeOut); \r\n    }\r\n\r\n    // selecciona el post que el usuario dio click\r\n    const selectPost = postId => {\r\n        dispatch({\r\n            type: SELECT_POST,\r\n            payload: postId\r\n        })\r\n    }\r\n\r\n    // edita o modifica una post\r\n    const updatePost = async post => {\r\n        try {\r\n            const url = `https://jsonplaceholder.typicode.com/posts/${post.id}`;\r\n            const resultado = await clienteAxios.put(url, post);\r\n\r\n            const alerta = {\r\n                msg: 'Post editado exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: POST_OK,\r\n                payload: alerta\r\n            })\r\n            \r\n            dispatch({\r\n                type: UPDATE_POST,\r\n                payload: resultado.data\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: HIDE_ALERT\r\n            })\r\n        }, timeOut); \r\n    }\r\n\r\n    // elimina un post\r\n    const deletePost = async postId => {\r\n        try {\r\n            const url = `https://jsonplaceholder.typicode.com/posts/:${postId}`;\r\n\r\n            await clienteAxios.delete(url);\r\n            \r\n            const alerta = {\r\n                msg: 'Post eliminado exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: POST_OK,\r\n                payload: alerta\r\n            })\r\n\r\n            dispatch({\r\n                type: DELETE_POST,\r\n                payload: postId\r\n            })\r\n                        \r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: HIDE_ALERT\r\n            })\r\n        }, timeOut); \r\n    }\r\n\r\n    return (\r\n        <postContext.Provider\r\n            value={{\r\n                posts: state.posts,\r\n                post: state.post,\r\n                message: state.message,\r\n                getPosts,\r\n                getPost,\r\n                createPost,\r\n                selectPost,\r\n                updatePost,\r\n                deletePost\r\n            }}\r\n        >\r\n            {props.children}\r\n        </postContext.Provider>\r\n    )\r\n}\r\n\r\nexport default PostState;"]},"metadata":{},"sourceType":"module"}