{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Joan\\\\Desktop\\\\AlkemyChallengeDos\\\\challengeReact\\\\context\\\\posts\\\\postState.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport postContext from './postContext';\nimport postReducer from './postReducer';\nimport { OBTENER_POSTS, AGREGAR_POST, POST_EXITOSO, POST_ERROR, OCULTAR_ALERTA, POST_ACTUAL, ELIMINAR_POST, ACTUALIZAR_POST } from '../../types';\nimport clienteAxios from '../../config/axios';\n\nvar PostState = function PostState(props) {\n  _s();\n\n  var initialState = {\n    posts: [],\n    post: [{}],\n    mensaje: {}\n  };\n  var timeOut = 2000; // dispatch para ejecutar las acciones\n\n  var _useReducer = useReducer(postReducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1]; // obtener los posts\n\n\n  var obtenerPosts = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var url, resultado, alerta;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              url = \"https://jsonplaceholder.typicode.com/posts\";\n              _context.next = 4;\n              return clienteAxios.get(url);\n\n            case 4:\n              resultado = _context.sent;\n              dispatch({\n                type: OBTENER_POSTS,\n                payload: resultado.data\n              });\n              _context.next = 12;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              alerta = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n              };\n              dispatch({\n                type: POST_ERROR,\n                payload: alerta\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function obtenerPosts() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // agregar nueva post\n\n\n  var agregarPost = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(post) {\n      var url, resultado, alerta, _alerta;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              url = \"https://jsonplaceholder.typicode.com/posts\";\n              _context2.next = 4;\n              return clienteAxios.post(url, post);\n\n            case 4:\n              resultado = _context2.sent;\n              alerta = {\n                msg: 'Post agregado exitosamente',\n                categoria: 'alerta-ok'\n              };\n              dispatch({\n                type: POST_EXITOSO,\n                payload: alerta\n              }); // insertar el post en el state\n\n              dispatch({\n                type: AGREGAR_POST,\n                payload: resultado.data\n              });\n              _context2.next = 14;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](0);\n              _alerta = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n              };\n              dispatch({\n                type: POST_ERROR,\n                payload: _alerta\n              });\n\n            case 14:\n              // Limpia la alerta después de 3 segundos\n              setTimeout(function () {\n                dispatch({\n                  type: OCULTAR_ALERTA\n                });\n              }, timeOut);\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 10]]);\n    }));\n\n    return function agregarPost(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // selecciona el post que el usuario dio click\n\n\n  var postActual = function postActual(postId) {\n    dispatch({\n      type: POST_ACTUAL,\n      payload: postId\n    });\n  }; // edita o modifica una post\n\n\n  var actualizarPost = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(post) {\n      var url, resultado, alerta, _alerta2;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              url = \"https://jsonplaceholder.typicode.com/posts/:\".concat(post.id);\n              _context3.next = 4;\n              return clienteAxios.put(url, post);\n\n            case 4:\n              resultado = _context3.sent;\n              //            const resultado = await clienteAxios.put(`/api/posts/${post.id}`, post);\n              alerta = {\n                msg: 'Post editado exitosamente',\n                categoria: 'alerta-ok'\n              };\n              dispatch({\n                type: POST_EXITOSO,\n                payload: alerta\n              });\n              dispatch({\n                type: ACTUALIZAR_POST,\n                payload: resultado.data.post\n              });\n              _context3.next = 14;\n              break;\n\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](0);\n              _alerta2 = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n              };\n              dispatch({\n                type: POST_ERROR,\n                payload: _alerta2\n              });\n\n            case 14:\n              // Limpia la alerta después de 3 segundos\n              setTimeout(function () {\n                dispatch({\n                  type: OCULTAR_ALERTA\n                });\n              }, timeOut);\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 10]]);\n    }));\n\n    return function actualizarPost(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // elimina un post\n\n\n  var eliminarPost = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(postId) {\n      var url, alerta, _alerta3;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              url = \"https://jsonplaceholder.typicode.com/posts/:\".concat(postId);\n              _context4.next = 4;\n              return clienteAxios[\"delete\"](url);\n\n            case 4:\n              alerta = {\n                msg: 'Post eliminado exitosamente',\n                categoria: 'alerta-ok'\n              };\n              dispatch({\n                type: POST_EXITOSO,\n                payload: alerta\n              });\n              dispatch({\n                type: ELIMINAR_POST,\n                payload: postId\n              });\n              _context4.next = 13;\n              break;\n\n            case 9:\n              _context4.prev = 9;\n              _context4.t0 = _context4[\"catch\"](0);\n              _alerta3 = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n              };\n              dispatch({\n                type: POST_ERROR,\n                payload: _alerta3\n              });\n\n            case 13:\n              // Limpia la alerta después de 3 segundos\n              setTimeout(function () {\n                dispatch({\n                  type: OCULTAR_ALERTA\n                });\n              }, timeOut);\n\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 9]]);\n    }));\n\n    return function eliminarPost(_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(postContext.Provider, {\n    value: {\n      posts: state.posts,\n      post: state.post,\n      mensaje: state.mensaje,\n      obtenerPosts: obtenerPosts,\n      agregarPost: agregarPost,\n      postActual: postActual,\n      actualizarPost: actualizarPost,\n      eliminarPost: eliminarPost\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\n_s(PostState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = PostState;\nexport default PostState;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostState\");","map":{"version":3,"sources":["C:/Users/Joan/Desktop/AlkemyChallengeDos/challengeReact/context/posts/postState.js"],"names":["React","useReducer","postContext","postReducer","OBTENER_POSTS","AGREGAR_POST","POST_EXITOSO","POST_ERROR","OCULTAR_ALERTA","POST_ACTUAL","ELIMINAR_POST","ACTUALIZAR_POST","clienteAxios","PostState","props","initialState","posts","post","mensaje","timeOut","state","dispatch","obtenerPosts","url","get","resultado","type","payload","data","alerta","msg","categoria","agregarPost","setTimeout","postActual","postId","actualizarPost","id","put","eliminarPost","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\r\n\r\nimport postContext from './postContext';\r\nimport postReducer from './postReducer';\r\nimport {\r\n    OBTENER_POSTS,\r\n    AGREGAR_POST,\r\n    POST_EXITOSO,\r\n    POST_ERROR,\r\n    OCULTAR_ALERTA,\r\n    POST_ACTUAL,\r\n    ELIMINAR_POST,\r\n    ACTUALIZAR_POST\r\n} from '../../types';\r\n\r\nimport clienteAxios from '../../config/axios';\r\n\r\nconst PostState = props => {\r\n\r\n    const initialState = {\r\n        posts : [],\r\n        post: [{}],\r\n        mensaje: {}\r\n    }\r\n\r\n    const timeOut = 2000;\r\n\r\n    // dispatch para ejecutar las acciones\r\n    const [state, dispatch] = useReducer(postReducer, initialState);\r\n\r\n    // obtener los posts\r\n    const obtenerPosts = async () => {\r\n        try {\r\n            const url = `https://jsonplaceholder.typicode.com/posts`;\r\n            const resultado = await clienteAxios.get(url);\r\n            \r\n            dispatch({\r\n                type: OBTENER_POSTS,\r\n                payload: resultado.data\r\n            });\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n    \r\n    // agregar nueva post\r\n    const agregarPost = async post => {\r\n\r\n        try {\r\n\r\n            const url = `https://jsonplaceholder.typicode.com/posts`;\r\n            const resultado = await clienteAxios.post(url, post);\r\n            \r\n            const alerta = {\r\n                msg: 'Post agregado exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: POST_EXITOSO,\r\n                payload: alerta\r\n            })\r\n\r\n            // insertar el post en el state\r\n            dispatch({\r\n                type: AGREGAR_POST,\r\n                payload: resultado.data\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: OCULTAR_ALERTA\r\n            })\r\n        }, timeOut); \r\n    }\r\n\r\n    // selecciona el post que el usuario dio click\r\n    const postActual = postId => {\r\n        dispatch({\r\n            type: POST_ACTUAL,\r\n            payload: postId\r\n        })\r\n    }\r\n\r\n    // edita o modifica una post\r\n    const actualizarPost = async post => {\r\n        try {\r\n            const url = `https://jsonplaceholder.typicode.com/posts/:${post.id}`;\r\n            const resultado = await clienteAxios.put(url, post);\r\n            \r\n//            const resultado = await clienteAxios.put(`/api/posts/${post.id}`, post);\r\n            \r\n            const alerta = {\r\n                msg: 'Post editado exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: POST_EXITOSO,\r\n                payload: alerta\r\n            })\r\n            \r\n            dispatch({\r\n                type: ACTUALIZAR_POST,\r\n                payload: resultado.data.post\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: OCULTAR_ALERTA\r\n            })\r\n        }, timeOut); \r\n    }\r\n\r\n    // elimina un post\r\n    const eliminarPost = async postId => {\r\n        try {\r\n            const url = `https://jsonplaceholder.typicode.com/posts/:${postId}`;\r\n\r\n            await clienteAxios.delete(url);\r\n            \r\n            const alerta = {\r\n                msg: 'Post eliminado exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: POST_EXITOSO,\r\n                payload: alerta\r\n            })\r\n\r\n            dispatch({\r\n                type: ELIMINAR_POST,\r\n                payload: postId\r\n            })\r\n                        \r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: OCULTAR_ALERTA\r\n            })\r\n        }, timeOut); \r\n    }\r\n\r\n    return (\r\n        <postContext.Provider\r\n            value={{\r\n                posts: state.posts,\r\n                post: state.post,\r\n                mensaje: state.mensaje,\r\n                obtenerPosts,\r\n                agregarPost,\r\n                postActual,\r\n                actualizarPost,\r\n                eliminarPost\r\n            }}\r\n        >\r\n            {props.children}\r\n        </postContext.Provider>\r\n    )\r\n}\r\n\r\nexport default PostState;"]},"metadata":{},"sourceType":"module"}